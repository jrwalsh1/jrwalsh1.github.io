<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Math and Data</title><link>http://jrwalsh1.github.io/</link><description>Projects, Data, and Mathematical Musings</description><atom:link href="http://jrwalsh1.github.io/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 19 Aug 2015 18:10:51 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Permutations and the N Queens Problem</title><link>http://jrwalsh1.github.io/posts/permutations-and-the-n-queens-problem/</link><dc:creator>Jon Walsh</dc:creator><description>&lt;div&gt;&lt;p&gt;I ran across an interesting problem recently while studying some recursive algorithms: the N Queens Problem.  Given an $N$-by-$N$ chessboard, the problem is to determine the number of configurations of $N$ queens on the chessboard that do not attack each other.  That is, for a valid configuration (solution) no two queens share the same row (rank), column (file), or diagonal.&lt;/p&gt;
&lt;p&gt;For $N = 1$ there is a trivial solution, but none exist for $N = 2$ or $3$.  $N = 4$ has two solutions:&lt;/p&gt;
&lt;div&gt; $$
\begin{matrix}
- &amp;amp; Q &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; Q \\\
Q &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; Q &amp;amp; -
\end{matrix}
\qquad \text{ and } \qquad
\begin{matrix}
- &amp;amp; - &amp;amp; Q &amp;amp; - \\\
Q &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; Q \\\
- &amp;amp; Q &amp;amp; - &amp;amp; -
\end{matrix}
$$ &lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;And they grow quickly from there.  For $N = 8$ there are $92$ solutions (many related by symmetry) -- here's one:&lt;/p&gt;
&lt;div&gt; $$
\begin{matrix}
- &amp;amp; - &amp;amp; Q &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; Q &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; Q \\\
Q &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; Q &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; Q &amp;amp; - \\\
- &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; Q &amp;amp; - &amp;amp; - &amp;amp; - \\\
- &amp;amp; Q &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; - &amp;amp; -
\end{matrix}
$$ &lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;and for $N = 15$ there are $2279184$ solutions.  It appears the number of solutions has not been computed for more than $N = 26$, where there are more than $22$ quadrillion solutions!  No general formula for the number solutions is known, nor is the asymptotic behavior.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jrwalsh1.github.io/posts/permutations-and-the-n-queens-problem/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c++</category><category>chess</category><category>combinatorics</category><category>mathjax</category><category>permutations</category><category>python</category><category>recursion</category><guid>http://jrwalsh1.github.io/posts/permutations-and-the-n-queens-problem/</guid><pubDate>Wed, 12 Aug 2015 22:29:14 GMT</pubDate></item><item><title>Measuring Wind Speeds from Flights</title><link>http://jrwalsh1.github.io/posts/measuring-wind-speeds-from-flights/</link><dc:creator>Jon Walsh</dc:creator><description>&lt;div&gt;&lt;p&gt;If you've ever flown between the East coast and West coast, you know the feeling: going west takes soooo much longer!  The difference in flight times is about an hour, which can be painful if it's tacked onto the end of a long trip.&lt;/p&gt;
&lt;p&gt;Let's run some basic numbers.  Suppose we between SFO and BOS on a 737, which has a cruising speed of $v_{\rm cruise} \sim 500$ mph.  It's $d \sim 2700$ miles between the two cities, so with no wind the flight time would be $t_{\rm flight} = $ 5 hours and 24 minutes.  If it takes $\Delta t = 1$ hour longer for the eastward trip, then the average jet stream velocity, $\bar{v}$, is given by the relation&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;\frac{d}{v_{\rm cruise} - \bar{v}} - \frac{d}{v_{\rm cruise} + \bar{v}} = \Delta t \\
&amp;amp; \qquad \Rightarrow \; \bar{v} = \frac{d}{\Delta t} \Biggl( \sqrt{1 + \frac{\Delta t^2 v_{\rm cruise}^2}{d^2} } - 1 \Biggr) \approx \frac{v_{\rm cruise} \Delta t}{2d} \, v_{\rm cruise} = \frac{\frac12 \Delta t}{t_{\rm flight}} v_{\rm cruise},
\end{align}
$$&lt;/p&gt;
&lt;p&gt;so that in this case $\bar{v} \approx 46 \text{ mph}$.  This is the average jet stream velocity over the flight path (as experienced by the flight), but what if we want to get finer grained than this?  Can we use this basic idea to build a map of the jet stream across the US?&lt;/p&gt;
&lt;p&gt;It turns out, the answer is yes!  And we can do so via a nice linear algebra problem, mixed in with some spherical geometry.  Here's how it goes.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jrwalsh1.github.io/posts/measuring-wind-speeds-from-flights/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>data science</category><category>flights</category><category>ipynb</category><category>linear algebra</category><category>mathjax</category><category>python</category><category>SQL</category><guid>http://jrwalsh1.github.io/posts/measuring-wind-speeds-from-flights/</guid><pubDate>Wed, 12 Aug 2015 08:14:53 GMT</pubDate></item><item><title>Symmetry Factors of Graphs</title><link>http://jrwalsh1.github.io/posts/symmetry-factors-of-graphs/</link><dc:creator>Jon Walsh</dc:creator><description>&lt;div&gt;&lt;p&gt;Particle physicists like to represent things with diagrams.  The popular example is Feynman diagrams, and there are rules to draw and evaluate diagrams for different scattering processes.  Diagrams also arise in the large scale structure of cosmology, where matter fluctuations can be described using perturbation theory (see this &lt;a href="https://en.wikipedia.org/wiki/Cosmological_perturbation_theory" title="Cosmological perturbation theory"&gt;Wikipedia article&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Diagrams for cosmological perturbation theory (specifically large scale structure): they are basically functions of directed graphs.  That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The value of the diagram is the product of weights of edges and vertices.&lt;/li&gt;
&lt;li&gt;Each edge in the diagram is associated with a momentum flow, which enters through the vertices.&lt;/li&gt;
&lt;li&gt;The weight of and edge is a scalar function of the momentum flow in the edge.&lt;/li&gt;
&lt;li&gt;The weight of a vertex is a scalar function of the momentum flow in the edges connecting to the vertex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These diagrams have two types of symmetry factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The internal symmetry factor $-$ the number of topologically-invariant permutations of the edges of the graph.&lt;/li&gt;
&lt;li&gt;The external symmetry factor $-$ if the vertices are labeled, the number of permutations of vertices that produce topologically distinct graphs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://jrwalsh1.github.io/posts/symmetry-factors-of-graphs/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>combinatorics</category><category>graphs</category><category>mathjax</category><category>python</category><guid>http://jrwalsh1.github.io/posts/symmetry-factors-of-graphs/</guid><pubDate>Wed, 12 Aug 2015 05:07:14 GMT</pubDate></item><item><title>Interpolations</title><link>http://jrwalsh1.github.io/posts/interpolations/</link><dc:creator>Jon Walsh</dc:creator><description>&lt;div&gt;&lt;p&gt;Interpolation is a great technique to convert discrete data into continuous data.  It's useful if you want to sample the domain at points other than the original data, or make continuous plots, or do operations convenient on a function (like integration or differentiation).  I'll talk about two types of interpolation of 1-D functions: the standard cubic spline and the less-known Steffen interpolation.  Along the way we'll encounter interesting relations in linear algebra and for the Lucas sequence (a generalization of the Fibonacci sequence).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jrwalsh1.github.io/posts/interpolations/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>functions</category><category>interpolation</category><category>mathjax</category><guid>http://jrwalsh1.github.io/posts/interpolations/</guid><pubDate>Tue, 11 Aug 2015 20:47:04 GMT</pubDate></item><item><title>About this blog</title><link>http://jrwalsh1.github.io/posts/about-this-blog/</link><dc:creator>Jon Walsh</dc:creator><description>&lt;div&gt;&lt;p&gt;This blog is a place for me to collect some of the explorations into different topics that I run across in my work, side projects, or just everyday life. &lt;/p&gt;
&lt;p&gt;When I'm working on a project I'll often run across a mathematical technique that I want to understand better. A great time for learning something new! Or sometimes I'll use this blog to describe a project, or some key part, that I'm working on. &lt;/p&gt;
&lt;p&gt;If you've found your way here for something specific, or just to poke around, I hope you find it useful!&lt;/p&gt;&lt;/div&gt;</description><guid>http://jrwalsh1.github.io/posts/about-this-blog/</guid><pubDate>Tue, 11 Aug 2015 20:45:12 GMT</pubDate></item></channel></rss>